import numpy as np
import pandas as pd
import matplotlib as plt
import datetime
from userDistributions import Sample

class Misc:
    def total_to_diff_by_day(self, data):
        new_data = [data[0]]
        for count in range(len(data)-1):
            new_data.append(data[count+1] - data[count])
        return new_data
    
    def diff_by_day_to_total(self, data):
        new_data = [data[0]]
        for count in range(len(data)-1):
            new_data.append(data[count] + data[count+1])
        return new_data

class User:
    def __init__(self):
        self.user_data_totals = np.empty((0, 7))
        self.user_data_current = np.empty((0, 7))
        self.user_id = 0
        self.user_ids = []

        self.user_monthly_cost_free = 0
        self.user_free_score_min = 0
        self.user_monthly_max_index_caption_min_free = 60
        self.user_monthly_max_gen_sec_free = 10
        self.user_monthly_max_gb_uploaded_free = 64
        self.user_monthly_max_searches_free = np.inf

        self.user_monthly_cost_l1 = 20
        self.user_l1_score_min = 0.5
        self.user_monthly_max_index_caption_min_l1 = 600
        self.user_monthly_max_gen_sec_l1 = 120
        self.user_monthly_max_gb_uploaded_l1 = 256
        self.user_monthly_max_searches_l1 = np.inf

        self.user_monthly_cost_l2 = 40
        
        self.user_monthly_max_index_caption_min_l2 = 6000
        self.user_monthly_max_gen_sec_l2 = 240
        self.user_monthly_max_gb_uploaded_l2 = 512
        self.user_monthly_max_searches_l2 = np.inf

    def get_new_user_id(self):
        user_id = self.user_id
        self.user_id += 1
        return user_id 
    
    def get_user_ids(self):
        return self.user_ids
    
    def get_user_data_totals(self):
        return self.user_data_totals

    def new_user(self):
        user_id = self.get_new_user_id()
        usage_score = Sample.user_usage_score()
        subscription_score = Sample.user_subscription_score()
        min_indexed_captioned = Sample.user_indexing_captioning()
        sec_generated = Sample.user_generation()
        gb_uploaded = Sample.user_storage()
        num_searches = Sample.user_search()
        user = np.array([
            user_id,  # 0: User ID
            usage_score,  # 1: User usage score
            subscription_score,  # 2: User subscription type code
            min_indexed_captioned,  # 3: Mins indexed and captioned by user
            sec_generated,  # 4: Mins generated by user
            gb_uploaded,  # 5: Gb uploaded by user
            num_searches  # 6: Number of searched made by user
        ])
        self.user_data_totals = np.vstack((self.user_data_totals, user))
        self.user_ids.append(user_id)
        return user

    def sample_user(self, user_id):
        new_min_index_caption = Sample.user_indexing_captioning()
        new_sec_gen = Sample.user_generation()
        new_gb_uploaded = Sample.user_storage()
        new_num_searches = Sample.user_search()
        sub_state = self.user_data_totals[user_id, 2]


    def set_subscription(self, cost, idx_cap_min, gen_sec, store_gb, search_num):
        self.user_monthly_cost = cost
        self.user_monthly_max_index_caption_min = idx_cap_min
        self.user_monthly_max_gen_sec = gen_sec
        self.user_monthly_max_gb_uploaded = store_gb
        self.user_monthly_max_searches = search_num




class Model:
    def __init__(self, start_date, end_date, user_aquisition_dates, action_dates):
        self.start_date = datetime.date(start_date[0], start_date[1], start_date[2])
        self.end_date = datetime.date(end_date[0], end_date[1], end_date[2])
        
        self.user_aquisition_dates = []
        self.user_aquisition_counts = []
        for date in user_aquisition_dates:
            self.user_aquisition_dates.append(datetime.date(date[0][0], date[0][1], date[0][2]))
            self.user_aquisition_counts.append(date[1])
        delta = self.end_date - self.start_date  
        self.days = np.linspace(1, delta.days, delta.days)
        self.new_users_over_time = np.ones(self.days.shape)*-1
        
        self.action_dates = []
        self.action_date_descs = []
        for date in action_dates:
            self.action_dates.append(datetime.date(date[0][0], date[0][1], date[0][2]))
            self.action_date_descs.append(date[1])

        # Model vars
        self.user_aq_k = 1/(1.6)
        self.cost_per_min_index_caption = 0.04
        self.cost_per_min_generated = 0
        self.cost_per_gb_uploaded = 0.023/30
        self.cost_per_search = 0.0017 
        self.base_cost_per_day = 15.6 
        self.r_and_d_init_cost = 1784.93
        self.r_and_d_k = 1/57
        self.salaries = [75000, 75000, 100000, 150000, 100000]

        # Timeseries data
        self.total_users_over_time = []
        self.total_ops_cost_over_time = []
        self.total_r_and_d_cost_over_time = []
        self.total_talent_cost_over_time = []

    def set_model_variables(self, day):
        pass

    def calculate_user_aquisition(self):
        # For the given aquisition dates, set the given number of users
        for count, date in enumerate(self.user_aquisition_dates):
            delta = date - self.start_date
            self.new_users_over_time[delta.days-1] = self.user_aquisition_counts[count]
        
        # Calculate the number of new users per day between the given data
        y_0 = 0
        day_0 = 0        
        for count, user_count in enumerate(self.new_users_over_time):
            if user_count != -1:
                y_0 = user_count
                day_0 = self.days[count]
            if user_count == -1:
                self.new_users_over_time[count] = y_0*np.e**(-self.user_aq_k*(self.days[count] - day_0))
        self.new_users_over_time = np.round(self.new_users_over_time, decimals=0)
        total_users = np.sum(self.new_users_over_time)



    def run(self):
        pass


if __name__ == '__main__':
    print('Financial Forecasting Model')
    
    # Given: Start date, End Date, Aquisition Dates, Action Dates
    start_date = (2024, 6, 17)  # not included in analysis
    end_date = (2025, 6, 1)
    
    # Aquisition dates format: [[Date, predicted signups], [], ...]
    user_aquisition_dates = [[(2024, 6, 18), 100], [(2024, 7, 12), 1000], [(2024, 8, 15), 1500], [(2024, 9, 15), 2000]]
    
    # Action dates format: [[Date, description], [], ...]
    action_dates = [[(2024, 8, 12), 'pricing']]

    model = Model(
        start_date=start_date,
        end_date=end_date,
        user_aquisition_dates=user_aquisition_dates,
        action_dates=action_dates
    )

    # Create the user aquisition curve

    # Create plot of use over time for indexing/captioning, video generation, storage, and searching

    # Create plot of cost of operations over time

    # 